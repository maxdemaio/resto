---
interface Props {
  title: string;
}

const { title } = Astro.props;
import "../styles/main.css";
---

<html lang="en" class="scroll-smooth 2">
  <head>
    <style is:global>
      @font-face {
        font-family: "Mantra";
        src: url("/fonts/mantra-regular-webfont.woff2") format("woff2");
        font-display: swap;
      }
    </style>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta property="og:title" content="Resto" />
    <meta property="og:description" content="</3" />
    <meta property="og:image" content="/hall-2.jpeg" />
    <link
      rel="preload"
      href="/fonts/mantra-regular-webfont.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
  </head>
  <body class="bg-[#974319]">
    <slot />

    <script>
      // Intersection API for left desktop nav
      const elementToChange = document.getElementById("desktop-nav");
      const targetElement = document.getElementById("hero");

      if (elementToChange && targetElement) {
        const options = {
          root: null,
          rootMargin: "0px",
          threshold: 0.45, // Change this value as needed
        };

        // Change the desktop left nav color based on intersection
        const intersectionObserver = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              elementToChange.style.color = "#974319";
              const anks = elementToChange.querySelectorAll("a");
              // Loop through all anchor tags and set the ::before pseudo-element style
              anks.forEach((ank) => {
                ank.classList.remove("strike-white");
              });
            } else {
              // Change the color of the element to change
              elementToChange.style.color = "white";
              const anks = elementToChange.querySelectorAll("a");
              // Loop through all anchor tags and set the ::before pseudo-element style
              anks.forEach((ank) => {
                ank.classList.add("strike-white");
              });
            }
          });
        }, options);

        intersectionObserver.observe(targetElement);
      }
    </script>
  </body>
</html>
